<meta charset = "UTF-8"> 表示字符集
<meta name ="keyWords" content =""> 表示关键字
<meta name ="description" content =""> 表示网站描述
em 是相对于父元素字体大小的倍数
rem r:root根 相对于html字体大小的倍数 用于响应式布局
rem.js
document body
documentEvent html
图片：
.png:可以透明
Z-INDEX:
z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。

注释：元素可拥有负的 z-index 属性值。

注释：Z-index 仅能在定位元素上奏效（例如 position:absolute;）！

说明
该属性设置一个定位元素沿 z 轴的位置，z 轴定义为垂直延伸到显示区的轴。如果为正数，则离用户更近，为负数则表示离用户更远。


标签p自带上下16像素外边距
body自带八个像素的外边距
如果img外面有a标签就会自带蓝色边框（在ie678中）
标签：
1、<textarea> 标签定义多行的文本输入控件。可以用鼠标拖动它放大缩小(resize:none;可以消除这个属性)
2、fieldset 元素可将表单内的相关元素分组。

  <fieldset> 标签将表单内容的一部分打包，生成一组相关表单的字段。

  当一组表单元素放到 <fieldset> 标签内时，浏览器会以特殊方式来显示它们，它们可能有特殊的边界、3D 效果，或者甚至可创建一个子表单来处理这些元素。

  <fieldset> 标签没有必需的或唯一的属性。

  <legend> 标签为 fieldset 元素定义标题。
3、.defaultValue//输入设置的默认值

CSS2：
行级元素：inline :span a
块级元素：block:div p h1
替换元素：img input //既可以设置宽高又可以并列在同一行
css选择器：
1、id选择器 #id 设权重值为100//如果全是类选择器的权重值大于一个id选择器，依然是id最大
2、类选择器 .class 设权重值为10
3、标签/元素选择器：div{} h1{} 设权重值为1
4、后代选择器 #div h1{}
5、子代选择器 #div>h1{}
6、分组选择器 #div,h1{}
7、伪类选择器 #div:hover{}//在IE6下只能给a加//鼠标移动到连接上
                ：link//未访问的链接
                ：visited//已访问的链接
                :active//按住的链接

元素塌陷问题（子元素脱离文档流父元素无高度）：
1、设置高
2、溢出隐藏
3、设置浮动
4、绝对定位
5、css3:
.clearfix::after{
content:'';
display:block;
clear:both;

}
多行文字居中：
父元素：
display:table;
子元素：
display:table-cell;

行及元素在块级元素中屏居中
text-line:center;
line-height:
块级元素在块级元素中居中
1、overflow:hidden;
margin: 75px auto;
2、绝对定位
position:absolute;
 top :50%;
 left ：50%;
margin-top = -25px;
 margin-left =-25px;
 3、transform:translate(-50%,-50%)
 JAVASCRIPT:
 var:variable
 js:number string boolean undefined null object function
 typeof undefined : undefined
  typeof null:object
  script写在body里是加载完DOM文件不加载资源文件就开始加在script
  script写在head里是加载完DOM文件加载资源文件才加在script：window.onload = function(){}
 定义一个方法：
 函数立即调用：（function(){})（）；
  function fn1(){}  可以先调用后定义
  var fn2 = function(){}； 不可以先调用后定义
  定义对象：
  1、var obj1 = new Object();
  obj1.name = "zhangsan";
  obj1.eat = function(){}
  2、var obj1 = {
  name: "zhangsan",
  eat: function(){
  }
  };
  for循环：
  for(var p in obj3){        //for in 就是循环数组和对象
  console.log(obj3[p]);
  }
  String:
  1、indexOf():检索字符串
  2、charAt(0):获取字符串
  3、substring(start,stop):截取字符串

bom:

DOM:
DOM Element :
nodeType 属性返回以数字值返回指定节点的节点类型。

如果节点是元素节点，则 nodeType 属性将返回 1。

如果节点是属性节点，则 nodeType 属性将返回 2。
定义和用法
nextSibling 属性返回指定节点之后紧跟的节点，在相同的树层级中。

被返回的节点以 Node 对象返回。

注释：如果没有 nextSibling 节点，则返回值为 null。
2、sort(function(a,b){
     return a-b;//从小到大
     return b-a;//从大到小
     return Math.random()-0.5;//随机排序  乱序
})//数组排序  如果不赋值则按字母顺序排序


获取元素：
document.getElementById("div");
document.getElementsByTagName("div");//获取节点列表
document.getElementsByClassName(".div");//有兼容性问题
document.getElementsByName("username");//有兼容性问题
创建一个元素
定时器：
setTimeout   //返回值是number型，会跳出当前执行对列
setInterval  //返回值是number型
获取宽度：
offsetWidth(offsetHeight): content+padding+border
offsetLeft(offsetTop):是相对离他最近已经定位的主先元素的距离，如果都没定位是相对于body定位
offsetParent:是相对离他最近已经定位的主先元素的对象
clientX//
pageX

如何让一个元素在网页里不显示：
1、display:none;//事件没有不能绑定事件,不占空间
2、opacity:0;
filter:alpha(opacity=0);//占空间有事件
3、visibility:hidden;//占空间，没事件
this:
1、在函数、计数器中this代表window
2、对象.事件this代表的是对象
事件冒泡：
从事件源开始向外冒泡直到父元素（传播）//xx.attachEvent("onclick",function(){});//只支持IE678，他只有事件冒泡没有事件捕获,事件可以重复绑定并且是倒叙显示，this指向的是window
xx.addEventListener("",function(){},false);事件可以重复绑定并且是正叙显示\\不写true or false 则默认false


事件捕获：
从父元素向事件源捕获，并且是先捕获后冒泡//xx.addEventListener("click",function(){},true);
阻止事件冒泡:
1、e.stopPropagetion()
2、在IE下：window.event.cancelBubble = true
e在不同浏览器下表现形式：
e = e || window.event//早期IE的写法
CSS3：
1、图片的懒加载：ajax
2、预加载
JQUERY的优点:
1、提供非常强大的选择器
2、解决浏览器的兼容问题
3、提供许多DOM操作方法
4、有非常丰富的动画效果
5、有许多丰富的插件

JQUERY笔记：
注意：原生对象 => jq对象  $(oDiv)
      jq对象   => 原生对象 $("#div1")[0]  $("#div1").get(0)
      原生对象和 jq对象不可以相互调用其方法
1、文档就绪函数//等DOM加载完成：$(document).ready(function(){})/$(function(){}):://好处：不会污染全局变量
2、$("*").css("background","red")://所有元素的背景全变成红色包括HTML BODY
2、parent > child//亲子代选择器
   ancestor descendant//后代选择器
   prev + next//下一个相邻兄弟选择器
   prev ~ siblings//跟随其的所有同级元素
   $("#ul li:eq(0)")选中第一个    $("#ul li:eq(-1)")选中倒数第一个
   $("#ul li:even") 选择所引值为偶数的元素，从 0 开始计数   $("#ul li:odd") 选择索引值为奇数元素，从 0 开始计数
   $("#ul li:last") 选择最后一个匹配的元素。                $("#ul li:fist")选择第一个匹配的元素。
   $("#ul li:lt(0)")   选择匹配集合中所有索引值小于给定index参数的元素      $("#ul li:gt(0)") 选择匹配集合中所有索引值大于给定index参数的元素
   属性：
   原生的属性：1、oDiv.index=5;//简单的属性赋值，在DOM结构里看不到
                  oDiv.setAttribute("aa","123")//可以再DOM结构里看到
                  oDiv.getAttribute（"aa"）//查看属性的值
               2、oDiv.className = "aa"//会覆盖原有的类名
                  oDiv.className+= " aa "//会保留原来的类名
   JQUERY:1、$("#DIV1").attr("aa","123")//可以再DOM结构看到
             $("#DIV1").attr("aa")//获取值
             $("#DIV1").removeAttr("aa")//移除
             $("#DIV1").prop("aa","123")//再DOM结构里看不到//遇到typle = "checkbox"需要用到checked属性时只能用prop
             $("#DIV1").prop("aa")//获取值
             $("#DIV1").removeProp("aa")//移除
             $("#username").val()//取值：取value的值
             $("#username").val("lisi")//设置值
          2、$("#div1").addClass("aa")//不会覆盖原有的类名
          3、$("#div1").css("aa")
          4、
          5、
          6、$("#div1").width（）//content,没参数是获取，有参数是设置
             $("#div1").innerWidth（）//content+padding//没参数是获取，有参数是设置
                         $("#div1").position（）//获取匹配元素中第一个元素的当前坐标，相对指离该元素最近的而且被定位过的祖先元素的坐标/没参数是获取，有参数是设置
 $("#div1").outerWidth（）//content+padding+border//没参数是获取，有参数是设置
             $("#div1").outerWidth（true）//content+padding+border+margin//没参数是获取，有参数是设置
          7、$("#div1").offset（）//在匹配的元素集合中，获取的第一个元素的当前坐标，或设置每一个元素的坐标，//没参数是获取，有参数是设置
          8、$("#div1").offsetParent（）//取得离指定元素最近的含有定位信息的祖先元素//这个方法不接受任何参数。
   遍历：
          1、.eq()和:eq（）一样
          2、.filter(":eq(0)")筛选
          3、.is("li")判断什么是不是li,不能链式操作
          4、.closest()//开始于当前元素从DOM结构往上找，找到一个就停止
             .parents()//开始于父元素从DOM结构往上找到根，找到所有的
          5、.nextAll()//找到所有
             .nextUntil()//通过选择器，DOM节点，或jQuery对象得到每个元素之后的所有兄弟元素，但不包括匹配的元素。
   事件：
          1、mouseover//支持冒泡
             mouseunter//不支持冒泡
          2、mouseout//支持冒泡
             mouseleave//不支持冒泡
          3、.hover()// mouseunter+ mouseleave
   CSS3:
   1、text-shadow
   none： 无阴影
   <length>①： 第1个长度值用来设置对象的阴影水平偏移值。可以为负值
   <length>②： 第2个长度值用来设置对象的阴影垂直偏移值。可以为负值
   <length>③： 如果提供了第3个长度值则用来设置对象的阴影模糊值。不允许负值
   <color>： 设置对象的阴影的颜色。 s
   2、white-space:nowrap;//不换行
       overflow:hidden;//
       text-overflow:ellipsis;//后面省攻略的变成..
   		clip;//裁剪和hidden差不多
       word-break: break-all;//强行换行
   3、background-color//充满border
     背景图片充满padding
     repeat//充满border
     background-origin:content-box;//决定背景图片从哪开始
     		 padding-box;默认值
     		 margin-box;
padding-box：从padding区域（不含padding）开始向外裁剪背景。
     border-box：从border区域（不含border）开始向外裁剪背景。默认值
     content-box：从content区域开始向外裁剪背景。
     text：从前景内容的形状（比如文字）作为裁剪区域向外裁剪，如此即可实现使用背景作为填充色之类的遮罩效果。遮罩效果 See with Webkit


     background-size:px px;
     取值：
     <length>：用长度值指定背景图像大小。不允许负值。//会失真
     <percentage>：用百分比指定背景图像大小。不允许负值。//相对于设置div之类的宽高比例
     auto：背景图像的真实大小。
     cover：将背景图像等比缩放到完全覆盖容器，背景图像有可能超出容器。
     contain：将背景图像等比缩放到宽度或高度与容器的宽度或高度相等，背景图像始终被包含在容器内。


     渐变颜色（用不上）
弹性盒模型{
子元素分配父元素的剩余空间
}

变形：transform
位移：translate(50px,50px)
放大缩小的比例：scale(1.5,1.5)   (-1.5)先放大再翻转
拉伸：skew(45deg);
矩阵：matrix
transform:rotate(45deg);旋转
transform-origin:
 cnblogs starof
 3D:
 视角：是给父元素加的perspective 角度会不同
            子元素加   角度相同
 视角源点：perspective-origin
 保持3D：preserve-3D;
 过渡：
 从一个状态到另一个状态
 transition:width 2s;
 transition:all 2s ease//  2s//延迟;
  <' transition-property '>： 检索或设置对象中的参与过渡的属性
  <' transition-duration '>： 检索或设置对象过渡的持续时间
  <' transition-timing-function '>： 检索或设置对象中过渡的动画类型
  {
  linear： 线性过渡。等同于贝塞尔曲线(0.0, 0.0, 1.0, 1.0)
   ease： 平滑过渡。等同于贝塞尔曲线(0.25, 0.1, 0.25, 1.0)
   ease-in： 由慢到快。等同于贝塞尔曲线(0.42, 0, 1.0, 1.0)
   ease-out： 由快到慢。等同于贝塞尔曲线(0, 0, 0.58, 1.0)
   ease-in-out： 由慢到快再到慢。等同于贝塞尔曲线(0.42, 0, 0.58, 1.0)
   step-start： 等同于 steps(1, start)
   step-end： 等同于 steps(1, end)
   steps(<integer>[, [ start | end ] ]?)： 接受两个参数的步进函数。第一个参数必须为正整数，指定函数的步数。第二个参数取值可以是start或end，指定每一步的值发生变化的时间点。第二个参数是可选的，默认值为end。
   cubic-bezier(<number>, <number>, <number>, <number>)： 特定的贝塞尔曲线类型，4个数值需在[0, 1]区间内
  }
  <' transition-delay '>： 检索或设置对象延迟过渡的时间
动画：
forwards 动画不回到初始状态
<' animation-name '>： 检索或设置对象所应用的动画名称
<' animation-duration '>： 检索或设置对象动画的持续时间
<' animation-timing-function '>： 检索或设置对象动画的过渡类型
<' animation-delay '>： 检索或设置对象动画延迟的时间
<' animation-iteration-count '>： 检索或设置对象动画的循环次数
<' animation-direction '>： 检索或设置对象动画在循环中是否反向运动
<' animation-fill-mode '>： 检索或设置对象动画时间之外的状态
<' animation-play-state '>： 检索或设置对象动画的状态。w3c正考虑是否将该属性移除，因为动画的状态可以通过其它的方式实现，比如重设样式
animation:xx
@key frame{
0%{}
50%{}
100%{}
}
@key frame{
form
{}
to{}

}
HTML5：html5shiv.js  让IE678支持新的标签
花瓣网图片网站   ico制作小图标
1、语义化标签 便于开发者阅读和写出更优雅的代码，有利于爬虫
什么是标签语义化

标签的语义

通过标签判断内容语义，例如根据h1标签判断出内容是标题，根据<p>判断内容是段落、<input>标签是输入框等。判断标签是否语义化去掉样式，看网页结构是否组织良好有序，是否仍然有很好的可读性。

为什么标签要语义化

1. 搜索引擎友好。
2. 更容易让屏幕阅读器读出网页内容。
3. 去掉或样式丢失的时候能让页面呈现清晰的结构。
4. 便于团队开发和维护。
如何使标签更具语义化

标题内容型标题使用<h2>而不是<div class="h2">,段落使用<p>标签，锚点使用<a>。表单分组表单要用<fieldset>标签包起来，并用<legend>标签进行说明表单的用途。每个<input>标签对应的说明文本都需要使用label标签，并且通过为<input>设置id属性，在<label>标签中设置“for=someId”来让说明文本和相应的<input>关联起来。表格表格标题要使用<caption>，表头使用<thead>包围，主体部分使用包围，尾部使用tfoot包围，表头和一般单元格要区分开，表头用th,一般单元格用td`。应注意的问题

尽可能减少使用无语义标签div和span。
语义不明显，可以用p也可以使用div的情况下，尽量用p。
不要使用纯样式标签，例如b、font和u等，改用CSS设置。
使用HTML5的结构元素，HTML5新特性一节中会介绍。
部分标签全称与中文翻译
<header></header>
nav
footer
<input>
<datalist >//下拉选框
</datalist>
fi
上下外边距16 左右外边距40
2、视频与音频
格式化工厂
<video src="" autoplay width controls> </video>
<aduio src="" autoplay  controls></audio>
3、
4、json:javascript object notation 前后端传值的格式 用字符串表示js对象
var str = JSON.stringify(odj);//对象转换字符串
var obj = JSON.parse(str);//字符串转化为对象
在线校验JSON格式
XML:不怎么用了
<userinfo></userinfo>
基本数据类型（number string boolean null undefined）是存在栈里
引用类型是存在堆里
深拷贝：
function clone(obj){
var newObj = {};
for(var p in obj){
if(typeof obj[p] == "obj"){
 newObj[p] = clone(obj[p]);
}
else{
newObj[p] = obj[p];}
}
}

eval 可以解析各种字符串  不安全
自定义属性 data-aa="123"最好写data-
h5:dataset.aa
jq:$().data(aa);
js上单线程的
浏览器是多线程的
<script src="" ></script>
<script src=""async ></script>异步加载 w3c提出 下载完就执行 顺序会乱
<script src=""defer ></script>异步加载 IE提出 先下载后执行
CDN:Content Delivery  Network    内容分发网络   优化性能
跨域：同源策略语
跨域的几种情况：
http://www.a.com       http://www.b.com     域名不同
http://www.qq.com      http:/new.qq.com     主域和子域
http://www.a.com8080   http://www.a.com:8081 端口号不同
http://www.a.com       http://www.a.com      协议不同
所有src 不存在跨域问题
跨域方式：
1、JSONP: json padding  利用script 标签的src 属性利用GET传值方式 进行跨域 -----get
post: 传的大 不是明文  传表单用
get:在头里传的少 是明文
2、iframe: 增加dom 结构 对搜索引擎不友好 不建议使用 ------get
3、服务器代理方式  后端跨域 没有问题 只有前端有跨域问题
4、h5:postMessage  ------post

XAMPP 用于开发
$(function(){
$get(""{});
});
CANVAS:做游戏什么的
    REQUIRE:
模块化开发，文件的依赖加载
require(["yy"],function(yy){});
define([""],function(){
return xx});
define(["xx"],function(xx){
return yy});
怎样判断是不是数组;
{arr.constructor== Array
arr instanceof Array
}


requireJS  AMD 异步   依赖前置
SEAJS     CMD   通用  依赖就近


整站开发：
流程：
1、规划项目的目录结构
2、分析网站需要引入哪些外部文件（js、css）
3、分析psd
    （1）分析页面由哪几部分组成的
    （2）页面当中哪些部分是要被重用的
    （3）页面当中哪些需要封装成组件
    （4）页面当中哪些图片需要做成css精灵
4、为后端开发人员预留好接口
5、与产品经理沟通好产品需要兼容什么浏览器、需要兼容什么样的终端设备


切图：

改变this 的几种方式：
1、fn.call()第一个参数是this 的指向  后面的参数是函数传参
2、fn.apply()第一个参数是this 的指向  后面的参数是函数传参（以数组的形式）
3、fn.bind()第一个参数是this 的指向  后面的参数是函数传参  不会直接调用函数 想要调用就加（）
移动开发：
适应手机分辨率
<meta name= "viewport"
content="device-width", user-scalable=no,initial-scale=1.0,maximum-scale=1.0,minimum=1.0>
RWD 响应式 流式布局
navigator.userAgent判断是什么类型 （移动端还是pc端）最早浏览器网警公司
location.href="";跳转
媒体查询：
<link rel="stylesheet" href=""  media=""/>
代码段：
@media (max-width=600px){
div{
float:left;
}
}
@media(orientation:landscape){/*横屏*/}
@media(orientation:portrait){/*竖屏*/}
@media(-webkit-device-pixel-ratio:2){//DPR

}
分辨率：breakpoint
bootcss网站：Bootstrap  响应式布局v3.x
respond.js 让IE也支持css3



注意：
1、对象.style属性只能获取内联样式的值，他可以设置值
element.style//是指在js里设置的属性
2、innerHTML:取标签内的内容
3、Math.random()//0~1左闭右开
4、在form表单中button如果什么都不写则默认提交，如果写type ="button"就不会是默认提交了
5、类：具有相同属性和对象的集合
   对象：具体的对象
   this:当前对象的引用,当前实地化对象
   属性是定义在构造函数里
   方法是定义在原型（prototype）里,效率高，类名.prototype.方法名 = function(){};
   原型链：当一个对象执行一个方法时，先在构造函数里找如果有就不再找，找不到在上原型里找，原型里找不到就去object找。就是一级一级往上找
   6、cooliek不安全，只能存4K,有的只能存20条,随着每次请求从客户端发送到服务端
   7、.trim()消除字符串前后的空格
   8、.split("")//将字符串分割成数组
   9、动画前面加一个.stop()
   10、图片有时自己会大一点，用浮动和display:block就会解决
   11、在IE 6中不能给完全透明的元素绑定的事件如要绑定必须有颜色
   12、背景颜色的包括padding+border
   13、所有有src属性的都有onload事件
   张鑫旭
   阮一峰
   23种设计原理
   debugger  在调试的时候用
   themforst nnnbb                                                                                                                                                                                                                                                                                                                                                                                                             nbbbbbnvcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccb
   lantern

